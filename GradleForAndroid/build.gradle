//apply plugin: 'com.android.application'
project.apply([plugin: 'com.android.application'])
project.apply([from: 'script/local.gradle'])

// Create a variable called keystorePropertiesFile, and initialize it to your
// keystore.properties file, in the rootProject folder.
def keystorePropertiesFile = rootProject.file("GradleForAndroid/private.properties")

// Initialize a new Properties() object called keystoreProperties.
def keystoreProperties = new Properties()

// Load your keystore.properties file into the keystoreProperties object.
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId "me.zhang.gradleforandroid"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    // https://developer.android.com/studio/publish/app-signing.html
    signingConfigs {
        release {
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
        }
    }

    buildTypes {
        debug {
            buildConfigField("String", "AUTHOR", "\"DEBUG_ZHANG\"")
            resValue("string", "app_name", "Gradle for Android")

            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        release {
            buildConfigField("String", "AUTHOR", "\"RELEASE_ZHANG\"")
            resValue("string", "app_name", "Gradle for Android Pro")

            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debugRelease.initWith(buildTypes.release)
        debugRelease {
            debuggable true
            applicationIdSuffix '.debugrelease'
            minifyEnabled false
            signingConfig signingConfigs.debug
        }

    }
    sourceSets.debugRelease.setRoot('src/release')

    flavorDimensions('abi', 'version')
    productFlavors {
        arm {
            dimension 'abi'
        }

        free {
            dimension 'version'
            targetSdkVersion 23

            return void
        }

        paid {
            dimension 'version'

            return void
        }
    }

    return void
}

android.applicationVariants.all { variant ->
    // Do something
    println("applicationVariants $variant.name")
    variant.outputs.each { output ->
        def file = output.outputFile
        output.outputFile = new File(file.parent, file.name.replace(".apk", "-${variant.versionName}.apk"))
    }
}

// Manipulate the Model
android.buildTypes.each {
    type -> type.applicationIdSuffix = ".$type.name"
}

//dependencies {
project.dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
//    compile supportDependencies.appCompatV7 // Refer from dependencies.gradle
    add('compile', supportDependencies.appCompatV7, {
        // Configuration statements
    })
    testCompile junitDependencies.junit
    testCompile robolectricDependencies.robolectric
    compile jakeWhartonDependencies.butterknife
    annotationProcessor jakeWhartonDependencies.butterknifeCompiler
}

ext {
    local = 'Hello from build.gradle'
}

task printProperties << {
    println local // Local extra property
    println propertiesFile // Property from file
    if (project.hasProperty('cmd')) {
        println cmd // Command line property
    }
}

task printVariantNames() {
    doLast {
        android.applicationVariants.all {
            variant -> print variant.name
        }
    }
}

task copyApks(type: Copy) {
    from("$buildDir/outputs/apk") {
        exclude '**/*unsigned.apk', '**/*unaligned.apk'
    }
    into 'apks'
}